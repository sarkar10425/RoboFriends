{"version":3,"sources":["components/Cards.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Cards","props","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterbots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbD,SAACC,GAAU,IAChBC,EAAeD,EAAfC,GAAGC,EAAYF,EAAZE,KAAKC,EAAOH,EAAPG,MACb,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,UAAsCK,IAAK,SACnD,6BACC,4BAAKJ,GACL,4BAAKC,MCWCI,EAjBA,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCEZU,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKV,UAAU,OACf,2BACAW,KAAK,SACLC,YAAY,gBACZZ,UAAU,gCACVa,SAAUH,MCCGI,EARA,SAAClB,GACf,OACC,yBAAKmB,MAAO,CAACC,SAAU,SAAWC,OAAQ,kBAAmBC,OAAQ,UACnEtB,EAAMuB,WCiBKC,E,YAnBd,WAAYxB,GAAQ,IAAD,8BAClB,4CAAMA,KACDyB,MAAM,CACVC,UAAU,GAHO,E,8EAOFC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,0DAEDG,KAAK7B,MAAMuB,a,GAhBQQ,aCqDbC,G,kBA1Cd,aAAc,IAAD,8BACZ,+CAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAM,CACVjB,OAAQ,GACR2B,YAAa,IAJF,E,iFAQO,IAAD,OAClBG,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAQ9B,IAAD,OACDC,EAAad,KAAKJ,MAAMjB,OAAOoC,QAAO,SAAAC,GAC3C,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEjE,OAAgC,IAA7BjB,KAAKJ,MAAMjB,OAAOwC,OACb,0CAIR,yBAAK5C,UAAU,MACd,wBAAIH,GAAG,UAAUG,UAAU,MAA3B,eACA,kBAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAlCLM,IAAMlB,YCAJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACR,kBAAC,EAAD,MAECC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.3af7381f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cards = (props) =>{\r\n  const {id,name,email}=props;\r\n    return (\r\n      <div className='tc bg-light-green dib pa3 ma2 br3 bw2 grow shadow-5'>\r\n        <img src={`https://robohash.org/${id}?20x20`} alt={\"Robo\"} />\r\n        <div>\r\n        \t<h1>{name}</h1>\r\n        \t<h2>{email}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport Cards from './Cards';\r\n// import {robots} from './robots';\r\nconst CardList=({robots}) =>{\r\n  return(\r\n    <div>\r\n      {\r\n      robots.map((user,i) => {\r\n        return(\r\n          <Cards \r\n          key={i} \r\n          id={robots[i].id} \r\n          name={robots[i].name} \r\n          email={robots[i].email}/>\r\n            );\r\n          })\r\n    }\r\n    </div>\r\n  );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\ttype='search' \r\n\t\tplaceholder='search robots' \r\n\t\tclassName='bg-light-blue br3 pa3 ma2 bw2'\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style={{overflow: 'scroll' , border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n \r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcoponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Oooops....That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n// import {robots} from './robots';\r\n// import Cards from './Cards';\r\n\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('http://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots: users}));\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tconst filterbots = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0){\r\n\t\t\treturn <h1>Loading...</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 id=\"thisone\" className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList robots={filterbots} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t);\r\n\t\t}\r\n\t\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Cards from './Cards';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t<App />\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}